version: '3.8'
services:
  config-server:
    image: config-service
    build:
      context: ./config-service
      dockerfile: Dockerfile
    environment:
    - SPRING_APPLICATION_NAME=${CONFIG_APPLICATION_NAME}
    - SERVER_PORT=${CONFIG_SERVER_PORT}
    - SPRING_CLOUD_DISCOVERY_ENABLED=${CONFIG_SPRING_CLOUD_DISCOVERY_ENABLED}
    - EUREKA_INSTANCE_PREFER_IP_ADDRESS=${CONFIG_EUREKA_INSTANCE_PREFER_IP_ADDRESS}
    - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${CONFIG_CLIENT_SERVICE_URL_DEFAULTZONE}
    - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=${CONFIG_MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE}
    - SPRING_CLOUD_CONFIG_SERVER_GIT_URI=${CONFIG_SPRING_CLOUD_CONFIG_SERVER_GIT_URI}
    - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_CONFIG_SERVER_ENVIRONMENT=${CONFIG_LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_CONFIG_SERVER_ENVIRONMENT}
    - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_CONFIG=${CONFIG_LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_CONFIG}
    - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_CONFIG_SERVER_ENVIRONMENT_MULTIPLEJGITENVIRONMENTREPOSITORY=${CONFIG_LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_CONFIG_SERVER_ENVIRONMENT_MULTIPLEJGITENVIRONMENTREPOSITORY}
    - SPRING_CLOUD_CONFIG_SERVER_GIT_USERNAME=${CONFIG_SPRING_CLOUD_CONFIG_SERVER_GIT_USERNAME}
    - SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD=${CONFIG_SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD}
    ports:
      - "${CONFIG_SERVER_PORT}:${CONFIG_SERVER_PORT}"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${CONFIG_SERVER_PORT}/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  eureka-server:
    image: discovery-service
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    environment:
      - SPRING_APPLICATION_NAME=${DISCOVERY_APPLICATION_NAME}
      - SERVER_PORT=${DISCOVERY_SERVER_PORT}
      - EUREKA_CLIENT_FETCH_REGISTRY=${DISCOVERY_EUREKA_CLIENT_FETCH_REGISTRY}
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=${DISCOVERY_EUREKA_CLIENT_REGISTER_WITH_EUREKA}
#      - DISCOVERY_CLIENT_FETCH_REGISTRY=false
#      - DISCOVERY_CLIENT_REGISTER_WITH_EUREKA=false
    ports:
      - "${DISCOVERY_SERVER_PORT}:${DISCOVERY_SERVER_PORT}"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${DISCOVERY_SERVER_PORT}/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  gateway:
    image: gateway-service
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    environment:
        - SPRING_APPLICATION_NAME=${GATEWAY_APPLICATION_NAME}
        - SERVER_PORT=${GATEWAY_SERVER_PORT}
        - SPRING_CLOUD_DISCOVERY_ENABLED=${GATEWAY_SPRING_CLOUD_DISCOVERY_ENABLED}
        - EUREKA_INSTANCE_PREFER_IP_ADDRESS=${GATEWAY_INSTANCE_PREFER_IP_ADDRESS}
        - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${GATEWAY_CLIENT_SERVICE_URL_DEFAULTZONE}
        - EUREKA_INSTANCE_INSTANCE_ID=${GATEWAY_INSTANCE_INSTANCE_ID}
        - SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_ENABLED=${GATEWAY_CLOUD_GATEWAY_DISCOVERY_LOCATOR_ENABLED}
        - SPRING_CLOUD_CONFIG_ENABLED=${GATEWAY_SPRING_CLOUD_CONFIG_ENABLED}
    ports:
      - "${GATEWAY_SERVER_PORT}:${GATEWAY_SERVER_PORT}"
    depends_on:
      - config-server
      - eureka-server
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/eureka/" ]
      interval: 10s
      timeout: 5s
      retries: 5

  bns-reference:
    image: bns-reference
    build:
      context: ./BnsRef
      dockerfile: Dockerfile
    environment:
      - SPRING_APPLICATION_NAME=${BACK_SPRING_APPLICATION_NAME}
      - SPRING_CLOUD_CONFIG_URI=${BACK_SERVER_URI}
      - SPRING_CONFIG_IMPORT=${BACK_SPRING_CONFIG_IMPORT}
      - SPRING_CLOUD_CONFIG_ENABLED=${BACK_SPRING_CLOUD_CONFIG_ENABLED}
      - EUREKA_INSTANCE_PREFER_IP_ADDRESS=${BACK_INSTANCE_PREFER_IP_ADDRESS}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${BACK_CLIENT_SERVICE_URL_DEFAULTZONE}
      - EUREKA_INSTANCE_INSTANCE_ID=${BACK_INSTANCE_INSTANCE_ID}
    ports:
      - "${Back_SERVER_PORT}:${Back_SERVER_PORT}"
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network

  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
        - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USERNAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:26.1.3
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN_USER}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - DB_VENDOR=postgres
      - DB_ADDR=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_NAME}
      - DB_USER=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    command: start-dev --import-realm
    ports:
      - "${KEYCLOAK_PORT}:8080"
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    depends_on:
      - postgres
    networks:
      - app-network
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
#      interval: 20s      # vérifie toutes les 20 secondes
#      timeout: 10s       # attend max 10s par test
#      retries: 6         # doit échouer 6 fois de suite
#      start_period: 60s  # ne pas signaler d'échec pendant 60s

  frontend:
    image: angular-frontend
    build:
      context: C:/Users/Amine/Documents/Bns-Front/Bns-Front
      dockerfile: Dockerfile
      args:
        - API_URL=${API_URL}
    ports:
      - "${ANGULAR_PORT}:80"
    depends_on:
      - gateway
    networks:
      - ${NETWORK_NAME}

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge